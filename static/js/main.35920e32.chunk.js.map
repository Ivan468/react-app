{"version":3,"sources":["sdmin/docs/Docs.js","redux/add-text-action.js","redux/types.js","sdmin/LeftPanel/LeftPanel.js","redux/save-words.js","sdmin/TopPanel/TopPanel.js","sdmin/NewPost/WordsList.js","sdmin/NewPost/NewPost.js","redux/text-parser-action.js","sdmin/Posts/Posts.js","viev/HomePage.js","App.js","store.js","redux/add-text-reducer.js","redux/text-parser-reduser.js","serviceWorker.js","index.js"],"names":["Docs","addText","text","type","payload","LeftPanel","className","to","saveWords","dispatch","getState","words","localStorage","setItem","JSON","stringify","save","textParserReduser","TopPanel","onClick","this","props","Component","connect","WordsList","wordList","map","word","index","key","NewPost","name","id","cols","rows","onChange","e","target","value","exactWordsCollections","state","addTextReducer","textParserReducer","doc","nlp","json","terms","Posts","HomePage","App","path","component","exact","reduser","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.35920e32.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nfunction Docs(){\r\n\r\n    return(\r\n\r\n        <div>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Docs;","import {ADD_TEXT} from \"./types\";\r\n\r\nconst addText = ( text ) => {\r\n    return {\r\n        type: ADD_TEXT,\r\n        payload: text\r\n    }\r\n}\r\n\r\nexport default addText;","export const ADD_TEXT = \"ADD_TEXT\";\r\nexport const TEXT_PARSER = \"TEXT_PARSER\";\r\nexport const SAVE_WORDS = \"SAVE_WORDS\";\r\nexport const GET_TO_WORDS = \"GET_TO_WORDS\";\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nfunction LeftPanel() {\r\n  return (\r\n    <div className=\"left-panel\">\r\n      <ul>\r\n        <li>\r\n          <NavLink to=\"/posts\">Posts</NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink to=\"/new-posts\">new-posts</NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink to=\"/docs\">Docs</NavLink>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LeftPanel;\r\n","import {SAVE_WORDS} from \"./types\";\r\n\r\nconst save = ( words) => {\r\n\r\n    return {\r\n        type: SAVE_WORDS,\r\n        payload: localStorage.setItem('key', JSON.stringify(words))\r\n    }\r\n}\r\n\r\nexport default function  saveWords() {\r\n\r\n    return (dispatch, getState) => {\r\n        const words = getState().textParserReduser\r\n        dispatch(save(words));\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport  {Link} from \"react-router-dom\";\r\nimport {connect } from \"react-redux\";\r\nimport saveWords from \"../../redux/save-words\";\r\n\r\nclass TopPanel extends Component {\r\n  render() {\r\n    return (\r\n\r\n    <div className=\"top-panel\">\r\n            <Link to=\"\">WordExtraction</Link>\r\n            <button onClick={this.props.saveWords}> Save</button>  \r\n    </div>\r\n    \r\n    )\r\n  }\r\n \r\n}\r\nconst getDispatchToRops = (dispatch) => {\r\n\r\n  return {\r\n    saveWords: () => dispatch(saveWords())\r\n  }\r\n}\r\n\r\nexport default connect(null, getDispatchToRops) (TopPanel);\r\n","import React, { Component} from \"react\";\r\n\r\nclass WordsList extends Component {\r\n\r\n    render() {\r\n        const { wordList } = this.props;\r\n        return(\r\n\r\n            <div>\r\n                { wordList.map((word, index) => <p key={index}>{word.text}</p> ) }\r\n            </div>\r\n\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default WordsList;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport addText from \"../../redux/add-text-action\";\r\nimport LeftPanel from \"../LeftPanel/LeftPanel\";\r\nimport TopPanel from \"../TopPanel/TopPanel\";\r\nimport exactWordsCollections from \"../../redux/text-parser-action\";\r\nimport WordsList from \"./WordsList\";\r\n\r\nclass NewPost extends Component {\r\n  render() {\r\n    return <div>\r\n            <TopPanel/> \r\n            <div>\r\n                <LeftPanel/>\r\n                <div>\r\n                <textarea name=\"addText\" id=\"\" cols=\"30\" rows=\"10\" onChange={(e) => this.props.addText(e.target.value)}>\r\n\r\n                        </textarea>\r\n                        <button onClick={this.props.exactWordsCollections}>Click</button>\r\n                        <WordsList  wordList = { this.props.words }/>\r\n                </div>\r\n            </div>\r\n    </div>;\r\n  }\r\n}\r\n\r\nconst getStateToProps = (state) => {\r\n    return {\r\n        text: state.addTextReducer,\r\n        words: state.textParserReducer\r\n    }\r\n}\r\n\r\nconst getDispatchToProps = (dispatch) => {\r\n    return {\r\n        addText: e => dispatch(addText(e)),\r\n        exactWordsCollections: () => dispatch(exactWordsCollections())\r\n    }\r\n}\r\n\r\n\r\nexport default connect(getStateToProps, getDispatchToProps)(NewPost);\r\n","import { TEXT_PARSER } from \"./types\";\r\nimport nlp from \"compromise\";\r\n\r\nconst wordCollection = (words) => {\r\n  return {\r\n    type: TEXT_PARSER,\r\n    payload: words,\r\n  };\r\n};\r\n\r\nexport default function exactWordsCollection() {\r\n  return (dispatch, getState) => {\r\n    const text = getState().addTextReducer;\r\n    const doc = nlp(text);\r\n    dispatch(wordCollection(doc.json(0).terms));\r\n  };\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nclass Posts extends Component {\r\n  render() {\r\n    return (\r\n\r\n    <div></div>\r\n    \r\n    )\r\n  }\r\n}\r\n\r\nexport default Posts;\r\n","import React from 'react';\r\n\r\nfunction HomePage(){\r\n\r\n    return(\r\n        <div>HomePAge</div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default HomePage","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Docs from './sdmin/docs/Docs';\nimport NewPost from './sdmin/NewPost/NewPost';\nimport Posts from './sdmin/Posts/Posts';\nimport HomePage from './viev/HomePage';\n\n\nfunction App() {\n  return (\n     <Router>\n        <Route path=\"/\" component={HomePage} exact/> \n        <Route path=\"/docs\" component={Docs}  exact/> \n        <Route path=\"/new-post\" component={NewPost}  exact/> \n        <Route path=\"/posts\" component={Posts}  exact/> \n     </Router>\n  );\n}\n\nexport default App;\n","import thunk from \"redux-thunk\";\r\nimport {createStore, applyMiddleware, combineReducers} from \"redux\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport {addTextReducer} from './redux/add-text-reducer'\r\nimport { textParserReducer} from \"./redux/text-parser-reduser\"\r\n\r\nconst reduser = combineReducers({\r\n    \r\n    addTextReducer,\r\n    textParserReducer\r\n}\r\n)\r\n\r\n\r\nconst store = createStore(\r\n\r\n\r\n    reduser,\r\n    composeWithDevTools(applyMiddleware(thunk))\r\n)\r\n\r\nexport default store;","import { ADD_TEXT } from \"./types\";\r\n\r\nexport const addTextReducer = (state = \"\", action) => {\r\n  switch (action.type) {\r\n    case ADD_TEXT:\r\n      return action.payload;\r\n  }\r\n  return state;\r\n};\r\n","import { TEXT_PARSER } from \"./types\";\r\n\r\nexport const textParserReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case TEXT_PARSER:\r\n      return action.payload;\r\n  }\r\n  return state;\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport store from \"./store\"\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n   <Provider store={store}>\n         <App />\n   </Provider>,\n\n   \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}